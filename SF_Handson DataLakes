use role accountadmin;
use database util_db;

select util_db.public.grader(step, (actual = expected), actual, expected, description) as graded_results from
(SELECT 
 'DORA_IS_WORKING' as step
 ,(select 123 ) as actual
 ,123 as expected
 ,'Dora is working!' as description
); 

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
 SELECT
 'DLKW01' as step
  ,( select count(*)  
      from ZENAS_ATHLEISURE_DB.INFORMATION_SCHEMA.STAGES 
      where stage_schema = 'PRODUCTS'
      and 
      (stage_type = 'Internal Named' 
      and stage_name = ('PRODUCT_METADATA'))
      or stage_name = ('SWEATSUITS')
   ) as actual
, 2 as expected
, 'Zena stages look good' as description
); 
---------------------------------------------------------------


use role sysadmin;

// Create a new database and set the context to use the new database
create database ZENAS_ATHLEISURE_DB comment = 'Zenas Athleisure';
create schema PRODUCTS;

--use role accountadmin here
/*We're going to use a select statement on files in the @PRODUCT_METADATA Stage We can't run a select star - 
it won't work for data that hasn't been loaded.*/

list @product_metadata;
list @zenas_athleisure_db.products.product_metadata;

select $1 from @product_metadata; 

select $1 from @product_metadata/product_coordination_suggestions.txt;
select $1 from @product_metadata/sweatsuit_sizes.txt;
select $1 from @product_metadata/swt_product_line.txt;


create file format zmd_file_format_1 RECORD_DELIMITER = '^';

select $1
from @product_metadata/product_coordination_suggestions.txt
(file_format => zmd_file_format_1);

create file format zmd_file_format_2
FIELD_DELIMITER = '^';  

select $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11
from @product_metadata/product_coordination_suggestions.txt
(file_format => zmd_file_format_2);

CREATE OR REPLACE FILE FORMAT zmd_file_format_3
  FIELD_DELIMITER = '?'
  RECORD_DELIMITER = '??';

  CREATE OR REPLACE FILE FORMAT zmd_file_format_3
  FIELD_DELIMITER = '?'  -- '?'
  RECORD_DELIMITER = '\n';  -- newline


select $1, $2
from @product_metadata/product_coordination_suggestions.txt
(file_format => zmd_file_format_3);

create or replace file format zmd_file_format_3
FIELD_DELIMITER = '='
RECORD_DELIMITER = '^';

create or replace file format zmd_file_format_1 RECORD_DELIMITER = ';';

create view zenas_athleisure_db.products.sweatsuit_sizes as 
select REPLACE($1, concat(chr(13),chr(10))) as sizes_available
from @product_metadata/sweatsuit_sizes.txt
(file_format => zmd_file_format_1 ) where sizes_available <> '';

select * from zenas_athleisure_db.products.sweatsuit_sizes;


create or replace file format zmd_file_format_2
FIELD_DELIMITER = '|';

CREATE OR REPLACE FILE FORMAT zmd_file_format_2
  TYPE = 'CSV'
  FIELD_DELIMITER = '|'
  TRIM_SPACE = TRUE;

create  or replace view zenas_athleisure_db.products.SWEATBAND_PRODUCT_LINE as
SELECT REPLACE(TRIM($1), '\r', '') AS PRODUCT_CODE, 
       REPLACE(TRIM($2), '\r', '') AS HEADBAND_DESCRIPTION, 
       REPLACE(TRIM($3), '\r', '') AS WRISTBAND_DESCRIPTION
FROM @product_metadata/swt_product_line.txt
(FILE_FORMAT => zmd_file_format_2);


select $1,$2,$3
from @product_metadata/swt_product_line.txt
(file_format => zmd_file_format_2);

select * from  zenas_athleisure_db.products.SWEATBAND_PRODUCT_LINE;



create or replace file format zmd_file_format_3
FIELD_DELIMITER = '='
RECORD_DELIMITER = '^';

create or replace view zenas_athleisure_db.products.SWEATBAND_COORDINATION as
select REPLACE(TRIM($1), '\r', '') AS PRODUCT_CODE, 
       REPLACE(TRIM($2), '\r', '') AS HAS_MATCHING_SWEATSUIT
from @product_metadata/product_coordination_suggestions.txt
(file_format => zmd_file_format_3);


select * from zenas_athleisure_db.products.SWEATBAND_COORDINATION;
select sizes_available
from zenas_athleisure_db.products.sweatsuit_sizes;

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
 SELECT
   'DLKW02' as step
   ,( select sum(tally) from
        ( select count(*) as tally
        from ZENAS_ATHLEISURE_DB.PRODUCTS.SWEATBAND_PRODUCT_LINE
        where length(product_code) > 7 
        union
        select count(*) as tally
        from ZENAS_ATHLEISURE_DB.PRODUCTS.SWEATSUIT_SIZES
        where LEFT(sizes_available,2) = char(13)||char(10))     
     ) as actual
   ,0 as expected
   ,'Leave data where it lands.' as description
); 

-----------------------------------------------------------------

list @SWEATSUITS;

select $1
from @product_metadata/product_coordination_suggestions.txt
(file_format => zmd_file_format_1);


select $1
from @sweatsuits/purple_sweatsuit.png; -- will give error

select metadata$filename,count(*),
from @sweatsuits/purple_sweatsuit.png
group by metadata$filename;

select metadata$filename,count(*) AS NUMBER_OF_ROWS,
from @sweatsuits 
group by metadata$filename;

-- to use unstructured data in pdf or img format, we need to use directory (which is created when we add files to stages)

select * from directory(@sweatsuits);


select REPLACE(relative_path, '_', ' ') as no_underscores_filename
, REPLACE(no_underscores_filename, '.png') as just_words_filename
, INITCAP(just_words_filename) as product_name
from directory(@sweatsuits);

-- use nesting to get the abv query to fit to one col product_name 
SELECT INITCAP(REPLACE(REPLACE(relative_path, '_', ' '), '.png', '')) AS product_name
FROM directory(@sweatsuits);



--create an internal table for some sweatsuit info
create or replace table zenas_athleisure_db.products.sweatsuits (
	color_or_style varchar(25),
	file_name varchar(50),
	price number(5,2)
);

--fill the new table with some data
insert into  zenas_athleisure_db.products.sweatsuits 
          (color_or_style, file_name, price)
values
 ('Burgundy', 'burgundy_sweatsuit.png',65)
,('Charcoal Grey', 'charcoal_grey_sweatsuit.png',65)
,('Forest Green', 'forest_green_sweatsuit.png',64)
,('Navy Blue', 'navy_blue_sweatsuit.png',65)
,('Orange', 'orange_sweatsuit.png',65)
,('Pink', 'pink_sweatsuit.png',63)
,('Purple', 'purple_sweatsuit.png',64)
,('Red', 'red_sweatsuit.png',68)
,('Royal Blue',	'royal_blue_sweatsuit.png',65)
,('Yellow', 'yellow_sweatsuit.png',67);


select * from zenas_athleisure_db.products.sweatsuits ;

SELECT $1 AS product_name
FROM directory(@sweatsuits);

--join 2 tables

create or replace view PRODUCT_LIST as
SELECT INITCAP(REPLACE(REPLACE(relative_path, '_', ' '), '.png', '')) AS product_name, *
FROM directory(@sweatsuits) c
JOIN zenas_athleisure_db.products.sweatsuits s
ON c.$1 = s.file_name;

--cross join
create or replace view catalog as
select * 
from product_list p
cross join sweatsuit_sizes;


select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
 SELECT
 'DLKW03' as step
 ,( select count(*) from ZENAS_ATHLEISURE_DB.PRODUCTS.CATALOG) as actual
 ,180 as expected
 ,'Cross-joined view exists' as description
); 
---------------------------------------------------------------------------

-- Add a table to map the sweatsuits to the sweat band sets
create table zenas_athleisure_db.products.upsell_mapping
(
sweatsuit_color_or_style varchar(25)
,upsell_product_code varchar(10)
);

--populate the upsell table
insert into zenas_athleisure_db.products.upsell_mapping
(
sweatsuit_color_or_style
,upsell_product_code 
)
VALUES
('Charcoal Grey','SWT_GRY')
,('Forest Green','SWT_FGN')
,('Orange','SWT_ORG')
,('Pink', 'SWT_PNK')
,('Red','SWT_RED')
,('Yellow', 'SWT_YLW');


-- Zena needs a single view she can query for her website prototype
create view zenas_athleisure_db.products.catalog_for_website as 
select color_or_style
,price
,file_name
, get_presigned_url(@sweatsuits, file_name, 3600) as file_url
,size_list
,coalesce('Consider: ' ||  headband_description || ' & ' || wristband_description, 'Consider: White, Black or Grey Sweat Accessories')  as upsell_product_desc
from
(   select color_or_style, price, file_name
    ,listagg(sizes_available, ' | ') within group (order by sizes_available) as size_list
    from catalog
    group by color_or_style, price, file_name
) c
left join upsell_mapping u
on u.sweatsuit_color_or_style = c.color_or_style
left join sweatband_coordination sc
on sc.product_code = u.upsell_product_code
left join sweatband_product_line spl
on spl.product_code = sc.product_code;

select *  from zenas_athleisure_db.products.catalog_for_website ;

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
SELECT
'DLKW04' as step
 ,( select count(*) 
  from zenas_athleisure_db.products.catalog_for_website 
  where upsell_product_desc not like '%e, Bl%') as actual
 ,1 as expected
 ,'Relentlessly resourceful' as description
); 



---------******************************---------------------------
use role sysadmin;
create database MELS_SMOOTHIE_CHALLENGE_DB;

DROP schema MELS_SMOOTHIE_CHALLENGE_DB.PUBLIC;

create schema TRAILS;

--##creating internal stages
CREATE OR REPLACE STAGE MELS_SMOOTHIE_CHALLENGE_DB.TRAILS.TRAILS_GEOJSON
  STORAGE_INTEGRATION = my_integration
  ENCRYPTION = (TYPE = 'CLIENT_SIDE');

 CREATE OR REPLACE STAGE MELS_SMOOTHIE_CHALLENGE_DB.TRAILS.TRAILS_PARQUET
  STORAGE_INTEGRATION = my_integration
  ENCRYPTION = (TYPE = 'CLIENT_SIDE'); 

;
  select * from @trails_geojson (file_format => ff_json) ;
select * from @TRAILS_PARQUET(file_format => FF_PARQUET) ;

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
SELECT
'DLKW05' as step
 ,( select sum(tally)
   from
     (select count(*) as tally
      from mels_smoothie_challenge_db.information_schema.stages 
      union all
      select count(*) as tally
      from mels_smoothie_challenge_db.information_schema.file_formats)) as actual
 ,4 as expected
 ,'Camila\'s Trail Data is Ready to Query' as description
 ); 

 select *  from @TRAILS_PARQUET(file_format => FF_PARQUET) ;

 select $1:sequence_1:: number As SEQUENCE_1 ,
        $1:trail_name :: varchar as TRAIL_NAME ,
        $1:latitude :: number(11,8)  as LATITUDE,
        $1:longitude :: number(11,8) as LONGITUDE,
        $1:sequence_2:: number As SEQUENCE_2,
        $1:elevation as ELEVATION
 from @TRAILS_PARQUET(file_format => FF_PARQUET)
 order by sequence_1;

 create or replace view CHERRY_CREEK_TRAIL as
 select 
 $1:sequence_1 as point_id,
 $1:trail_name::varchar as trail_name,
 $1:latitude::number(11,8) as lng, --remember we did a gut check on this data
 $1:longitude::number(11,8) as lat
from @trails_parquet
(file_format => ff_parquet)
order by point_id;

select * from CHERRY_CREEK_TRAIL;


select top 100
lng||' '||lat as coord_pair
, 'POINT('||coord_pair||')' as trail_point
from cherry_creek_trail;

create or replace view cherry_creek_trail as
select 
 $1:sequence_1 as point_id,
 $1:trail_name::varchar as trail_name,
 $1:latitude::number(11,8) as lng,
 $1:longitude::number(11,8) as lat,
 lng||' '||lat as coord_pair
from @trails_parquet
(file_format => ff_parquet)
order by point_id;


select 
'LINESTRING('||
listagg(coord_pair, ',') 
within group (order by point_id)
||')' as my_linestring
from cherry_creek_trail
where point_id <= 2450
group by trail_name;

---for json file 
create or replace view DENVER_AREA_TRAILS  as
select
$1:features[0]:properties:Name::string as feature_name
,$1:features[0]:geometry:coordinates::string as feature_coordinates
,$1:features[0]:geometry::string as geometry
,$1:features[0]:properties::string as feature_properties
,$1:crs:properties:name::string as specs
,$1 as whole_object
from @trails_geojson (file_format => ff_json);

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
SELECT
'DLKW06' as step
 ,( select count(*) as tally
      from mels_smoothie_challenge_db.information_schema.views 
      where table_name in ('CHERRY_CREEK_TRAIL','DENVER_AREA_TRAILS')) as actual
 ,2 as expected
 ,'Mel\'s views on the geospatial data from Camila' as description
 );

 select * from DENVER_AREA_TRAILS;

 select 
'LINESTRING('||
listagg(coord_pair, ',') 
within group (order by point_id)
||')' as my_linestring
,st_length(my_linestring) as length_of_trail --this line is new! but it won't work!
from cherry_creek_trail
group by trail_name;
--Invalid argument types for function 'ST_LENGTH': (VARCHAR(134217728))


SELECT my_linestring, 
       ST_LENGTH(ST_GEOMFROMTEXT(my_linestring)) AS length_of_trail
FROM (
    SELECT 'LINESTRING(' || LISTAGG(coord_pair, ',') WITHIN GROUP (ORDER BY point_id) || ')' AS my_linestring
    FROM cherry_creek_trail
    GROUP BY trail_name
) subquery;

SELECT my_linestring, 
       ST_LENGTH(ST_GEOMFROMTEXT(my_linestring)) AS length_of_trail
FROM (
    SELECT 'LINESTRING(' || LISTAGG(coord_pair, ',') WITHIN GROUP (ORDER BY point_id) || ')' AS my_linestring
    FROM DENVER_AREA_TRAILS
    GROUP BY trail_name
) subquery;

select * from DENVER_AREA_TRAILS;

select * from   cherry_creek_trail;

select
'LINESTRING(' ||
Listagg (coord_pair, ',')
within group (order by point_id) || ')' as my_Linestring
, st_length(  ASD (my_linestring)) as length_of_trail --this line is new! but it won't work!
from cherry_creek_trail
group by trail_name;--Invalid argument types for function 'ST_LENGTH': (VARCHAR(134217728))

SELECT 
    'LINESTRING(' || LISTAGG(coord_pair, ',') WITHIN GROUP (ORDER BY point_id) || ')' AS my_Linestring,
    ST_LENGTH(ST_GEOGFROMTEXT(my_Linestring)) AS length_of_trail
FROM cherry_creek_trail
GROUP BY trail_name;



select * from DENVER_AREA_TRAILS;

select feature_name, 
st_length(to_geography ( )) as wo_length
, st_length(to_geography ( )) as geom_length
from denver_area_trails;


create or replace view DENVER_AREA_TRAILS ( FEATURE_NAME, FEATURE_COORDINATES, GEOMETRY, TRAIL_LENGTH, FEATURE_PROPERTIES, SPECS,
WHOLE_ OBJECT
Add the column name to the list.
select
$1: features[0]:properties:Name: :string as feature_name
$1: features[0]:geometry:coordinates::string as feature_coordinates
,$1: features [0]:geometry::string
as geometry
,st_length(
1) as trail_length
,$1: features[0]:properties::string as feature_properti.
,$1: crs: properties:name: :string as specs
,$1 as whole_object
from @trails-geojson (file_format => ff_json);

select * from cherry_creek_trail;

create or replace view DENVER_AREA_TRAILS 
( FEATURE_NAME, FEATURE_COORDINATES, GEOMETRY, TRAIL_LENGTH, FEATURE_PROPERTIES, SPECS,
WHOLE_OBJECT ) as
select
$1:features[0]:properties:Name::string as feature_name,
$1:features[0]:geometry:coordinates::string as feature_coordinates,
$1:features [0]:geometry::string as geometry,
st_length(TO_GEOGRAPHY($1:features[0]:geometry)) as trail_length,
$1:features[0]:properties::string as feature_properties,
$1:crs: properties:name::string as specs,
$1 as whole_object,
from @TRAILS_GEOJSON (file_format => ff_json);


select * from DENVER_AREA_TRAILS;


--Create a view that will have similar columns to DENVER_AREA_TRAILS 
--Even though this data started out as Parquet, and we're joining it with geoJSON data
--So let's make it look like geoJSON instead.
create or replace view DENVER_AREA_TRAILS_2 as
select 
trail_name as feature_name
,'{"coordinates":['||listagg('['||lng||','||lat||']',',') within group (order by point_id)||'],"type":"LineString"}' as geometry
,st_length(to_geography(geometry))  as trail_length
from cherry_creek_trail
group by trail_name;


--Create a view that will have similar columns to DENVER_AREA_TRAILS 
select feature_name, geometry, trail_length
from DENVER_AREA_TRAILS
union all
select feature_name, geometry, trail_length
from DENVER_AREA_TRAILS_2;


--Add more GeoSpatial Calculations to get more GeoSpecial Information! 
create or replace view  trails_and_boundaries as
select feature_name
, to_geography(geometry) as my_linestring
, st_xmin(my_linestring) as min_eastwest
, st_xmax(my_linestring) as max_eastwest
, st_ymin(my_linestring) as min_northsouth
, st_ymax(my_linestring) as max_northsouth
, trail_length
from DENVER_AREA_TRAILS
union all
select feature_name
, to_geography(geometry) as my_linestring
, st_xmin(my_linestring) as min_eastwest
, st_xmax(my_linestring) as max_eastwest
, st_ymin(my_linestring) as min_northsouth
, st_ymax(my_linestring) as max_northsouth
, trail_length
from DENVER_AREA_TRAILS_2;



select 'POLYGON(('|| 
    min(min_eastwest)||' '||max(max_northsouth)||','|| 
    max(max_eastwest)||' '||max(max_northsouth)||','|| 
    max(max_eastwest)||' '||min(min_northsouth)||','|| 
    min(min_eastwest)||' '||min(min_northsouth)||'))' AS my_polygon
from trails_and_boundaries;



select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
 SELECT
  'DLKW07' as step
   ,( select round(max(max_northsouth))
      from MELS_SMOOTHIE_CHALLENGE_DB.TRAILS.TRAILS_AND_BOUNDARIES)
      as actual
 ,40 as expected
 ,'Trails Northern Extent' as description
 );


 -- Melanie's Location into a 2 Variables (mc for melanies cafe)
set mc_lng='-104.97300245114094';
set mc_lat='39.76471253574085';

--Confluence Park into a Variable (loc for location)
set loc_lng='-105.00840763333615'; 
set loc_lat='39.754141917497826';

--Test your variables to see if they work with the Makepoint function
select st_makepoint($mc_lng,$mc_lat) as melanies_cafe_point;
select st_makepoint($loc_lng,$loc_lat) as confluent_park_point;

--use the variables to calculate the distance from 
--Melanie's Cafe to Confluent Park
select st_distance(
        st_makepoint($mc_lng,$mc_lat)
        ,st_makepoint($loc_lng,$loc_lat)
        ) as mc_to_cp;



CREATE OR REPLACE FUNCTION distance_to_mc(loc_lng number(38,32),loc_lat number(38,32))
  RETURNS FLOAT AS
  $$
   st_distance(
        st_makepoint('?','?')
        ,st_makepoint(loc_lng,loc_lat)
        )
  $$
  ;

  --Tivoli Center into the variables 
set tc_lng='-105.00532059763648'; 
set tc_lat='39.74548137398218';

select distance_to_mc($tc_lng,$tc_lat);


create or replace view competition as
select * 
from OPENSTREETMAP_DENVER.DENVER.V_OSM_DEN_AMENITY_SUSTENANCE
where 
    ((amenity in ('fast_food','cafe','restaurant','juice_bar'))
    and 
    (name ilike '%jamba%' or name ilike '%juice%'
     or name ilike '%superfruit%'))
 or 
    (cuisine like '%smoothie%' or cuisine like '%juice%');


    SELECT
 name
 ,cuisine
 , ST_DISTANCE(
    st_makepoint('-104.97300245114094','39.76471253574085')
    , coordinates
  ) AS distance_to_melanies
 ,*
FROM  competition
ORDER by distance_to_melanies;


CREATE OR REPLACE FUNCTION distance_to_mc(lng_and_lat GEOGRAPHY)
  RETURNS FLOAT
  AS
  $$
   st_distance(
        st_makepoint('-104.97300245114094','39.76471253574085')
        ,lng_and_lat
        )
  $$
  ;
SELECT
 name
 ,cuisine
 ,distance_to_mc(coordinates) AS distance_to_melanies
 ,*
FROM  competition
ORDER by distance_to_melanies;



-- Tattered Cover Bookstore McGregor Square
set tcb_lng='-104.9956203'; 
set tcb_lat='39.754874';

--this will run the first version of the UDF
select distance_to_mc($tcb_lng,$tcb_lat);

--this will run the second version of the UDF, bc it converts the coords 
--to a geography object before passing them into the function
select distance_to_mc(st_makepoint($tcb_lng,$tcb_lat));

--this will run the second version bc the Sonra Coordinates column
-- contains geography objects already
select name
, distance_to_mc(coordinates) as distance_to_melanies 
, ST_ASWKT(coordinates)
from OPENSTREETMAP_DENVER.DENVER.V_OSM_DEN_SHOP
where shop='books' 
and name like '%Tattered Cover%'
and addr_street like '%Wazee%';



create view DENVER_BIKE_SHOPS as
select name
--• ST_DISTANCE ( ) AS distance_to_melanies
, coordinates from OPENSTREETMAP_DENVER. DENVER.V_OSM_DEN_SHOP_OUTDOORS_AND_SPORT_VEHICLES
where shop = 'bicycle';


select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
  SELECT
  'DLKW08' as step
  ,( select truncate(distance_to_melanies)
      from mels_smoothie_challenge_db.locations.denver_bike_shops
      where name like '%Mojo%') as actual
  ,14084 as expected
  ,'Bike Shop View Distance Calc works' as description
 ); 



select *  from mels_smoothie_challenge_db.locations.denver_bike_shops
      where name like '%Mojo%';
 

select * from OPENSTREETMAP_DENVER. DENVER.V_OSM_DEN_SHOP_OUTDOORS_AND_SPORT_VEHICLES;


SELECT 
    name, 
    ST_DISTANCE(
        TO_GEOGRAPHY('POINT(' || coordinates[0] || ' ' || coordinates[1] || ')'),
        TO_GEOGRAPHY('POINT(-105.0092955 39.7566526)')
    ) AS distance_to_melanies,
    coordinates
FROM OPENSTREETMAP_DENVER.DENVER.V_OSM_DEN_SHOP_OUTDOORS_AND_SPORT_VEHICLES
WHERE shop = 'bicycle';





CREATE OR REPLACE FUNCTION distance_to_mc(loc_lng number(38,32),loc_lat number(38,32))
  RETURNS FLOAT
  AS
  $$
   st_distance(
        st_makepoint('?','?')
        ,st_makepoint(loc_lng,loc_lat)
        )
  $$
  ;


  --Tivoli Center into the variables 
set tc_lng='-105.00532059763648'; 
set tc_lat='39.74548137398218';

select distance_to_mc($tc_lng,$tc_lat);


create or replace view COMPETITION as 
select * 
from OPENSTREETMAP_DENVER.DENVER.V_OSM_DEN_AMENITY_SUSTENANCE
where 
    ((amenity in ('fast_food','cafe','restaurant','juice_bar'))
    and 
    (name ilike '%jamba%' or name ilike '%juice%'
     or name ilike '%superfruit%'))
 or 
    (cuisine like '%smoothie%' or cuisine like '%juice%');


    SELECT
 name
 ,cuisine
 , ST_DISTANCE(
    st_makepoint('-104.97300245114094','39.76471253574085')
    , coordinates
  ) AS distance_to_melanies
 ,*
FROM  competition
ORDER by distance_to_melanies;


CREATE OR REPLACE FUNCTION distance_to_mc(lng_and_lat GEOGRAPHY)
  RETURNS FLOAT
  AS
  $$
   st_distance(
        st_makepoint('-104.97300245114094','39.76471253574085')
        ,lng_and_lat
        )
  $$
  ;


  SELECT
 name
 ,cuisine
 ,distance_to_mc(coordinates) AS distance_to_melanies
 ,*
FROM  competition
ORDER by distance_to_melanies;


-- Tattered Cover Bookstore McGregor Square
set tcb_lng='-104.9956203'; 
set tcb_lat='39.754874';

--this will run the first version of the UDF
select distance_to_mc($tcb_lng,$tcb_lat);

--this will run the second version of the UDF, bc it converts the coords 
--to a geography object before passing them into the function
select distance_to_mc(st_makepoint($tcb_lng,$tcb_lat));

--this will run the second version bc the Sonra Coordinates column
-- contains geography objects already
select name
, distance_to_mc(coordinates) as distance_to_melanies 
, ST_ASWKT(coordinates)
from OPENSTREETMAP_DENVER.DENVER.V_OSM_DEN_SHOP
where shop='books' 
and name like '%Tattered Cover%'
and addr_street like '%Wazee%';


create or replace view DENVER_BIKE_SHOPS as
SELECT 
    name, 
   (distance_to_mc(coordinates)) AS distance_to_melanies, 
    coordinates 
FROM OPENSTREETMAP_DENVER.DENVER.V_OSM_DEN_SHOP_OUTDOORS_AND_SPORT_VEHICLES
WHERE shop = 'bicycle';

     


select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
  SELECT
  'DLKW08' as step
  ,( select truncate(distance_to_melanies)
      from mels_smoothie_challenge_db.locations.denver_bike_shops
      where name like '%Mojo%') as actual
  ,14084 as expected
  ,'Bike Shop View Distance Calc works' as description
 ); 




 create or replace external table T_CHERRY_CREEK_TRAIL(
	my_filename varchar(100) as (metadata$filename::varchar(100))
) 
location= @EXTERNAL_AWS_DLKW
auto_refresh = true
file_format = (type = parquet);


create or replace view
MELS_SMOOTHIE_CHALLENGE_DB. TRAILS. CHERRY_CREEK_TRAIL ( POINT_ID, TRAIL_NAME,
LNG, LAT,
COORD_PAIR
) as;
select
$1: sequence_1 as point_id,
$1: trail_name::varchar
as
trail_name,
$1:latitude::number(11,8) as lat,
$1:Longitude::number(11,8) as lng,
lng||' ' || lat as coord_pair,
 from @trails_parquet
(file_format => ff_parquet)
order by point_id;




select
$1: sequence_1 as point_id,
$1: trail_name::varchar as trail_name,
$1:latitude::number(11,8) as lat,
$1:Longitude::number(11,8) as lng,
lng||' ' || lat as coord_pair,
 from @trails_parquet
(file_format => ff_parquet)
order by point_id;


select 
 $1:sequence_1 as point_id,
 $1:trail_name::varchar as trail_name,
 $1:latitude::number(11,8) as lng,
 $1:longitude::number(11,8) as lat,
 lng||' '||lat as coord_pair,
 locations.distance_to_mc(lng,lat) as distance_to_melanies
from t_cherry_creek_trail;


select * from  locations.distance_to_mc(lng,lat) ;


CREATE OR REPLACE FUNCTION MELS_SMOOTHIE_CHALLENGE_DB.LOCATIONS.DISTANCE_TO_MC(
    LOC_LNG NUMBER(38,32), 
    LOC_LAT NUMBER(38,32)
)
RETURNS FLOAT
LANGUAGE SQL
AS '
   ST_DISTANCE(
        ST_MAKEPOINT(?, ?), -- Placeholder for reference longitude & latitude
        ST_MAKEPOINT(LOC_LNG, LOC_LAT)
    )
';


CREATE OR REPLACE FUNCTION MELS_SMOOTHIE_CHALLENGE_DB.LOCATIONS.DISTANCE_TO_MC("LOC_LNG" NUMBER(38,32), "LOC_LAT" NUMBER(38,32))
RETURNS FLOAT
LANGUAGE SQL
AS '
   st_distance(
        st_makepoint(''?'',''?'')
        ,st_makepoint(loc_lng,loc_lat)
        )
  ';


  SELECT 
    $1:sequence_1 AS point_id,
    $1:trail_name::VARCHAR AS trail_name,
    TRY_CAST($1:longitude::STRING AS NUMBER(11,8)) AS lng,  -- Ensure casting works
    TRY_CAST($1:latitude::STRING AS NUMBER(11,8)) AS lat,  -- Same fix for latitude
    CAST(TRY_CAST($1:longitude::STRING AS NUMBER(11,8)) AS STRING) || ' ' || 
    CAST(TRY_CAST($1:latitude::STRING AS NUMBER(11,8)) AS STRING) AS coord_pair, -- Ensure safe concatenation
    MELS_SMOOTHIE_CHALLENGE_DB.LOCATIONS.DISTANCE_TO_MC(
        TRY_CAST($1:longitude::STRING AS NUMBER(11,8)), 
        TRY_CAST($1:latitude::STRING AS NUMBER(11,8))
    ) AS distance_to_melanies  -- Explicit schema reference for UDF
FROM t_cherry_creek_trail;


create secure materialized view MELS_SMOOTHIE_CHALLENGE_DB.TRAILS.SMV_CHERRY_CREEK_TRAIL(
	POINT_ID,
	TRAIL_NAME,
	LNG,
	LAT,
	COORD_PAIR
  
) as
select 
 value:sequence_1 as point_id,
 value:trail_name::varchar as trail_name,
 value:latitude::number(11,8) as lng,
 value:longitude::number(11,8) as lat,
 lng||' '||lat as coord_pair

from t_cherry_creek_trail;



select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
  SELECT
  'DLKW09' as step
  ,( select row_count
     from mels_smoothie_challenge_db.information_schema.tables
     where table_schema = 'TRAILS'
    and table_name = 'SMV_CHERRY_CREEK_TRAIL')   
   as actual
  ,3526 as expected
  ,'Secure Materialized View Created' as description
 ); 


 select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
  SELECT
  'DLKW10' as step
  ,( select row_count
      from MY_ICEBERG_DB.INFORMATION_SCHEMA.TABLES
      where table_catalog = 'MY_ICEBERG_DB'
      and table_name like 'CCT_%'
      and table_type = 'BASE TABLE')   
   as actual
  ,100 as expected
  ,'Iceberg table created and populated!' as description
 ); 


 select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
SELECT
'DLKW04' as step
 ,( select count(*) 
  from zenas_athleisure_db.products.catalog_for_website 
  where upsell_product_desc not like '%e, Bl%') as actual
 ,1 as expected
 ,'Relentlessly resourceful' as description
);



 CREATE OR REPLACE EXTERNAL VOLUME iceberg_external_volume
   STORAGE_LOCATIONS =
      (
         (
            NAME = 'iceberg-s3-us-west-2'
            STORAGE_PROVIDER = 'S3'
            STORAGE_BASE_URL = 's3://uni-dlkw-iceberg'
            STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::321463406630:role/dlkw_iceberg_role'
            STORAGE_AWS_EXTERNAL_ID = 'dlkw_iceberg_id'
         )
      );

create database my_iceberg_db
 catalog = 'SNOWFLAKE'
 external_volume = 'iceberg_external_volume';

 set table_name = 'CCT_'||current_account();

create iceberg table identifier($table_name) (
    point_id number(10,0)
    , trail_name string
    , coord_pair string
  
    , user_name string
)
  BASE_LOCATION = $table_name
  AS SELECT top 100
    point_id
    , trail_name
    , coord_pair
    
    , current_user()
 FROM MELS_SMOOTHIE_CHALLENGE_DB.TRAILS.SMV_CHERRY_CREEK_TRAIL;
      
{"NAME":"iceberg-s3-us-west-2","STORAGE_PROVIDER":"S3","STORAGE_BASE_URL":"s3://uni-dlkw-iceberg","STORAGE_ALLOWED_LOCATIONS":["s3://uni-dlkw-iceberg/*"],"STORAGE_AWS_ROLE_ARN":"arn:aws:iam::321463406630:role/dlkw_iceberg_role","STORAGE_AWS_IAM_USER_ARN":"arn:aws:iam::850386665196:user/a2t11000-s","STORAGE_AWS_EXTERNAL_ID":"dlkw_iceberg_id","ENCRYPTION_TYPE":"NONE","ENCRYPTION_KMS_KEY_ID":""};

select * from identifier($table_name); 


      DESC EXTERNAL VOLUME iceberg_external_volume;
